{
  "template": "<div>  <div v-if=\"!payData || !payData.merchantData || payData.hasError\" class=\"form-manual-must text-center\">    <p class=\"title\">{{ t(\"errorGetPayment\", \"Error create payment! Please contact our support team.\") }}</p>    <p>{{ payData.error }}</p>  </div>  <div v-else-if=\"payData.merchantData.waitConfirms\">    <p>      {{ t(\"paymentAcceptedWaitConfirm\", \"Waiting confirms transaction:\") }} {{ payData.merchantData.confirmationsCurrent }} / {{payData.merchantData.confirmationsNeed}}    </p>  </div>  <div v-else-if=\"payData.merchantData.url && payData.merchantData.isIframe === '1'\">    <iframe      style=\"height: 400px;width: calc(100% + 40px);border: 0;margin: -32px -20px;\"      :src=\"payData.merchantData.url\"    />  </div>  <div v-else-if=\"payData.merchantData.url\">    <h2 class=\"go-test\" v-if=\"loadStatus || openPS\">{{ t(\"pleaseWait\", \"Please wait...\") }}</h2>    <p v-else>{{ t(\"waitingPayment\", \"Waiting payment:\") + \" \" + Number(order.inAmount).toFixed(2) }}      {{ order.route.from.symbol }}</p>    <form method=\"get\" :action=\"payData.merchantData.url\">      <button class=\"btn btn-submit merchant-pay-btn\" type=\"submit\" ref=\"paybtn\" v-if=\"!openPS\">        <span>{{ t(\"makePayment\", \"Make a payment\") }}</span>      </button>      <button style=\"display: none\" type=\"submit\" ref=\"paybtn\" v-else></button>    </form>  </div>  <div class=\"form-manual-must text-center\" v-else>    <p class=\"title\">{{ t(\"toCompleteOrderTransfer\", \"To complete the order, you need to transfer funds:\") }}</p>    <div v-if=\"payData.merchantData.showQR\" class=\"merchant-qrcode\">      <qrcode-vue     :value=\"payData.merchantData.walletAddr\"        :size=\"qrcodeSize\"        :background=\"qrcodeBackground\"        :foreground=\"qrcodeForeground\"        level=\"H\"        render-as=\"svg\"      />    </div>    <ol>      <li>        <div>          <p>{{ t(\"transfer\", \"Transfer:\") }}</p>          <div class=\"form-manual-must_txt\">            {{ Number(payData.merchantData.amount) }} {{ order.route.from.name }} {{ order.route.from.symbol }}          </div>        </div>      </li>      <li>        <div style=\"align-items: flex-start;flex-direction: column !important;\">          <p>{{ t(\"toAddress\", \"To address:\") }}</p>          <div class=\"form-manual-must_txt\" style=\"font-size: 0.83rem;\">            {{ payData.merchantData.walletAddr }}         </div>        </div>      </li>      <li v-if=\"payData.merchantData && payData.merchantData.commentTemplate\">        <div>          <p>{{ t(\"memo\", \"Memo:\") }}</p>          <div class=\"form-manual-must_txt\" style=\"font-size: 0.83rem;\">            {{ payData.merchantData.commentTemplate }}          </div>        </div>      </li>      <li v-if=\"payData.merchantData.confirmationsNeed\">        <div style=\"align-items: flex-start;flex-direction: column !important;\">          <p>{{ t(\"coinsWillApprovedAfter\", \"Coins will be approved after:\") }}</p>          <div class=\"form-manual-must_txt\" style=\"font-size: 0.8rem;\">            {{ payData.merchantData.confirmationsNeed || 12 }} {{ t(\"networkConfirmations\", \"network confirmations\") }}          </div>        </div>      </li>    </ol>  </div></div>",
  "props": {
    "order": {"type": "Object"},
    "payData": {"type": "Object", "default": {}},
    "qrcodeSize": {"type": "Number", "default": 150},
    "qrcodeBackground": {"type": "String", "default": "#ffffff"},
    "qrcodeForeground": {"type": "String", "default": "#000000"}
  },
  "data": "Function(data() {    return {      loadStatus: true,      openPS: true    }  })",
  "created": "Function(created() {    if (navigator && navigator.userAgent && navigator.userAgent.match(/(iPod|iPhone|iPad)/i))      this.openPS = false;    else      this.openPS = !localStorage.getItem('redirect-' + this.order.uid);  })",
  "mounted": "Function(mounted() {    if (this.payData && this.payData.merchantData && this.payData.merchantData.url && String(this.payData.merchantData.isIframe) !== \"1\") {      localStorage.setItem('redirect-' + this.order.uid, 't');      if (this.$refs && this.$refs.paybtn && this.openPS)        this.$refs.paybtn.click();      this.loadStatus = false;    }  })",
  "methods": {
    "t": "Function(t(k, d) {      const t = this.$t(\"ui.modules.\" + k);      if (t !== \"ui.modules.\" + k)        return t;      return d    })"
  }
}